//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export interface IApiClient {
    /**
     * @param body (optional) 
     * @return OK
     */
    login(body?: AuthRequest | undefined): Promise<AuthResponse>;
    /**
     * @param body (optional) 
     * @return OK
     */
    addExercise(body?: CreateExerciseCommand | undefined): Promise<void>;
    /**
     * @return OK
     */
    getAllExercises(): Promise<GetExerciseListItemQuery[]>;
    /**
     * @return OK
     */
    getExercise(id: string): Promise<GetExerciseQuery>;
    /**
     * @param body (optional) 
     * @return OK
     */
    editExercise(id: string, body?: EditExerciseCommand | undefined): Promise<void>;
    /**
     * @param body (optional) 
     * @return OK
     */
    addStats(exerciseId: string, body?: CreateExerciseUnitCommand | undefined): Promise<void>;
    /**
     * @return OK
     */
    getStats(exerciseId: string): Promise<GetExerciseUnitListItemQuery[]>;
    /**
     * @return OK
     */
    getLastStats(exerciseId: string): Promise<GetExerciseUnitItemQuery>;
    /**
     * @param body (optional) 
     * @return OK
     */
    register(body?: RegisterRequest | undefined): Promise<void>;
    /**
     * @param body (optional) 
     * @return OK
     */
    changepassword(body?: ChangePasswordRequest | undefined): Promise<void>;
}

export class ApiClient implements IApiClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @param body (optional) 
     * @return OK
     */
    login(body?: AuthRequest | undefined, cancelToken?: CancelToken): Promise<AuthResponse> {
        let url_ = this.baseUrl + "/api/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<AuthResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AuthResponse.fromJS(resultData200);
            return Promise.resolve<AuthResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            let result401: any = null;
            let resultData401  = _responseText;
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AuthResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    addExercise(body?: CreateExerciseCommand | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/Exercise/addExercise";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddExercise(_response);
        });
    }

    protected processAddExercise(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    getAllExercises( cancelToken?: CancelToken): Promise<GetExerciseListItemQuery[]> {
        let url_ = this.baseUrl + "/api/Exercise/getAllExercises";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAllExercises(_response);
        });
    }

    protected processGetAllExercises(response: AxiosResponse): Promise<GetExerciseListItemQuery[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetExerciseListItemQuery.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<GetExerciseListItemQuery[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetExerciseListItemQuery[]>(null as any);
    }

    /**
     * @return OK
     */
    getExercise(id: string, cancelToken?: CancelToken): Promise<GetExerciseQuery> {
        let url_ = this.baseUrl + "/api/Exercise/getExercise/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetExercise(_response);
        });
    }

    protected processGetExercise(response: AxiosResponse): Promise<GetExerciseQuery> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetExerciseQuery.fromJS(resultData200);
            return Promise.resolve<GetExerciseQuery>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetExerciseQuery>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    editExercise(id: string, body?: EditExerciseCommand | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/Exercise/editExercise/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEditExercise(_response);
        });
    }

    protected processEditExercise(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    addStats(exerciseId: string, body?: CreateExerciseUnitCommand | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/Stats/addStats/exercise={exerciseId}";
        if (exerciseId === undefined || exerciseId === null)
            throw new Error("The parameter 'exerciseId' must be defined.");
        url_ = url_.replace("{exerciseId}", encodeURIComponent("" + exerciseId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddStats(_response);
        });
    }

    protected processAddStats(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    getStats(exerciseId: string, cancelToken?: CancelToken): Promise<GetExerciseUnitListItemQuery[]> {
        let url_ = this.baseUrl + "/api/Stats/getStats/exercise={exerciseId}";
        if (exerciseId === undefined || exerciseId === null)
            throw new Error("The parameter 'exerciseId' must be defined.");
        url_ = url_.replace("{exerciseId}", encodeURIComponent("" + exerciseId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetStats(_response);
        });
    }

    protected processGetStats(response: AxiosResponse): Promise<GetExerciseUnitListItemQuery[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetExerciseUnitListItemQuery.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<GetExerciseUnitListItemQuery[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetExerciseUnitListItemQuery[]>(null as any);
    }

    /**
     * @return OK
     */
    getLastStats(exerciseId: string, cancelToken?: CancelToken): Promise<GetExerciseUnitItemQuery> {
        let url_ = this.baseUrl + "/api/Stats/getLastStats/exercise={exerciseId}";
        if (exerciseId === undefined || exerciseId === null)
            throw new Error("The parameter 'exerciseId' must be defined.");
        url_ = url_.replace("{exerciseId}", encodeURIComponent("" + exerciseId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetLastStats(_response);
        });
    }

    protected processGetLastStats(response: AxiosResponse): Promise<GetExerciseUnitItemQuery> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetExerciseUnitItemQuery.fromJS(resultData200);
            return Promise.resolve<GetExerciseUnitItemQuery>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetExerciseUnitItemQuery>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    register(body?: RegisterRequest | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/User/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    changepassword(body?: ChangePasswordRequest | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/User/changepassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processChangepassword(_response);
        });
    }

    protected processChangepassword(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class AuthRequest implements IAuthRequest {
    email!: string;
    password!: string;

    constructor(data?: IAuthRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): AuthRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AuthRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IAuthRequest {
    email: string;
    password: string;
}

export class AuthResponse implements IAuthResponse {
    token?: string | undefined;

    constructor(data?: IAuthResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): AuthResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AuthResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        return data;
    }
}

export interface IAuthResponse {
    token?: string | undefined;
}

export class ChangePasswordRequest implements IChangePasswordRequest {
    oldPassword?: string | undefined;
    newPassword?: string | undefined;

    constructor(data?: IChangePasswordRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.oldPassword = _data["oldPassword"];
            this.newPassword = _data["newPassword"];
        }
    }

    static fromJS(data: any): ChangePasswordRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePasswordRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oldPassword"] = this.oldPassword;
        data["newPassword"] = this.newPassword;
        return data;
    }
}

export interface IChangePasswordRequest {
    oldPassword?: string | undefined;
    newPassword?: string | undefined;
}

export class CreateExerciseCommand implements ICreateExerciseCommand {
    name?: string | undefined;
    icon?: string | undefined;
    sets?: number;
    extraSet?: boolean;

    constructor(data?: ICreateExerciseCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.icon = _data["icon"];
            this.sets = _data["sets"];
            this.extraSet = _data["extraSet"];
        }
    }

    static fromJS(data: any): CreateExerciseCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateExerciseCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["icon"] = this.icon;
        data["sets"] = this.sets;
        data["extraSet"] = this.extraSet;
        return data;
    }
}

export interface ICreateExerciseCommand {
    name?: string | undefined;
    icon?: string | undefined;
    sets?: number;
    extraSet?: boolean;
}

export class CreateExerciseUnitCommand implements ICreateExerciseUnitCommand {
    sessionDate?: Date;
    exerciseSet?: ExerciseSet[] | undefined;
    extraSet?: ExerciseSet;

    constructor(data?: ICreateExerciseUnitCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sessionDate = _data["sessionDate"] ? new Date(_data["sessionDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["exerciseSet"])) {
                this.exerciseSet = [] as any;
                for (let item of _data["exerciseSet"])
                    this.exerciseSet!.push(ExerciseSet.fromJS(item));
            }
            this.extraSet = _data["extraSet"] ? ExerciseSet.fromJS(_data["extraSet"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateExerciseUnitCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateExerciseUnitCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sessionDate"] = this.sessionDate ? this.sessionDate.toISOString() : <any>undefined;
        if (Array.isArray(this.exerciseSet)) {
            data["exerciseSet"] = [];
            for (let item of this.exerciseSet)
                data["exerciseSet"].push(item.toJSON());
        }
        data["extraSet"] = this.extraSet ? this.extraSet.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreateExerciseUnitCommand {
    sessionDate?: Date;
    exerciseSet?: ExerciseSet[] | undefined;
    extraSet?: ExerciseSet;
}

export class EditExerciseCommand implements IEditExerciseCommand {
    name?: string | undefined;
    icon?: string | undefined;
    sets?: number;
    extraSet?: boolean;

    constructor(data?: IEditExerciseCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.icon = _data["icon"];
            this.sets = _data["sets"];
            this.extraSet = _data["extraSet"];
        }
    }

    static fromJS(data: any): EditExerciseCommand {
        data = typeof data === 'object' ? data : {};
        let result = new EditExerciseCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["icon"] = this.icon;
        data["sets"] = this.sets;
        data["extraSet"] = this.extraSet;
        return data;
    }
}

export interface IEditExerciseCommand {
    name?: string | undefined;
    icon?: string | undefined;
    sets?: number;
    extraSet?: boolean;
}

export class ExerciseSet implements IExerciseSet {
    weight?: number;
    reps?: number;

    constructor(data?: IExerciseSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.weight = _data["weight"];
            this.reps = _data["reps"];
        }
    }

    static fromJS(data: any): ExerciseSet {
        data = typeof data === 'object' ? data : {};
        let result = new ExerciseSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["weight"] = this.weight;
        data["reps"] = this.reps;
        return data;
    }
}

export interface IExerciseSet {
    weight?: number;
    reps?: number;
}

export class GetExerciseListItemQuery implements IGetExerciseListItemQuery {
    id?: string;
    name?: string | undefined;
    icon?: string | undefined;

    constructor(data?: IGetExerciseListItemQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.icon = _data["icon"];
        }
    }

    static fromJS(data: any): GetExerciseListItemQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetExerciseListItemQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["icon"] = this.icon;
        return data;
    }
}

export interface IGetExerciseListItemQuery {
    id?: string;
    name?: string | undefined;
    icon?: string | undefined;
}

export class GetExerciseQuery implements IGetExerciseQuery {
    name?: string | undefined;
    icon?: string | undefined;
    sets?: number;
    extraSet?: boolean;
    id?: string;

    constructor(data?: IGetExerciseQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.icon = _data["icon"];
            this.sets = _data["sets"];
            this.extraSet = _data["extraSet"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): GetExerciseQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetExerciseQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["icon"] = this.icon;
        data["sets"] = this.sets;
        data["extraSet"] = this.extraSet;
        data["id"] = this.id;
        return data;
    }
}

export interface IGetExerciseQuery {
    name?: string | undefined;
    icon?: string | undefined;
    sets?: number;
    extraSet?: boolean;
    id?: string;
}

export class GetExerciseUnitItemQuery implements IGetExerciseUnitItemQuery {
    sessionDate?: Date;
    exerciseSet?: ExerciseSet[] | undefined;
    extraSet?: ExerciseSet;

    constructor(data?: IGetExerciseUnitItemQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sessionDate = _data["sessionDate"] ? new Date(_data["sessionDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["exerciseSet"])) {
                this.exerciseSet = [] as any;
                for (let item of _data["exerciseSet"])
                    this.exerciseSet!.push(ExerciseSet.fromJS(item));
            }
            this.extraSet = _data["extraSet"] ? ExerciseSet.fromJS(_data["extraSet"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetExerciseUnitItemQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetExerciseUnitItemQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sessionDate"] = this.sessionDate ? this.sessionDate.toISOString() : <any>undefined;
        if (Array.isArray(this.exerciseSet)) {
            data["exerciseSet"] = [];
            for (let item of this.exerciseSet)
                data["exerciseSet"].push(item.toJSON());
        }
        data["extraSet"] = this.extraSet ? this.extraSet.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetExerciseUnitItemQuery {
    sessionDate?: Date;
    exerciseSet?: ExerciseSet[] | undefined;
    extraSet?: ExerciseSet;
}

export class GetExerciseUnitListItemQuery implements IGetExerciseUnitListItemQuery {
    sessionDate?: Date;
    exerciseSet?: ExerciseSet[] | undefined;
    extraSet?: ExerciseSet;
    id?: string;

    constructor(data?: IGetExerciseUnitListItemQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sessionDate = _data["sessionDate"] ? new Date(_data["sessionDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["exerciseSet"])) {
                this.exerciseSet = [] as any;
                for (let item of _data["exerciseSet"])
                    this.exerciseSet!.push(ExerciseSet.fromJS(item));
            }
            this.extraSet = _data["extraSet"] ? ExerciseSet.fromJS(_data["extraSet"]) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): GetExerciseUnitListItemQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetExerciseUnitListItemQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sessionDate"] = this.sessionDate ? this.sessionDate.toISOString() : <any>undefined;
        if (Array.isArray(this.exerciseSet)) {
            data["exerciseSet"] = [];
            for (let item of this.exerciseSet)
                data["exerciseSet"].push(item.toJSON());
        }
        data["extraSet"] = this.extraSet ? this.extraSet.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IGetExerciseUnitListItemQuery {
    sessionDate?: Date;
    exerciseSet?: ExerciseSet[] | undefined;
    extraSet?: ExerciseSet;
    id?: string;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class RegisterRequest implements IRegisterRequest {
    login?: string | undefined;
    password?: string | undefined;
    email?: string | undefined;

    constructor(data?: IRegisterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.login = _data["login"];
            this.password = _data["password"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): RegisterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["login"] = this.login;
        data["password"] = this.password;
        data["email"] = this.email;
        return data;
    }
}

export interface IRegisterRequest {
    login?: string | undefined;
    password?: string | undefined;
    email?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}